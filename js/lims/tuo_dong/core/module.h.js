/*
	Copyright (c) 2009, Baidu Inc. All rights reserved.
	http://www.youa.com
	Download by http://www.codefans.net
	version: $version$ $release$ released
	author: yingjiakuan@baidu.com
*/

/**
 * @class ModuleH 模块管理Helper
 * @singleton 
 * @namespace QW
 * @helper
 */
(function(){

var modules={},
	mix = function(des, src, override){
		for(var i in src){
			if(override || !(i in des)){
				des[i] = src[i];
			}
		}
		return des;
	},
	isPlainObject = function(obj){return !!obj && obj.constructor == Object;},
	loadJs = QW.loadJs,
	loadingModules=[],
	isLoading=false;
function loadsJsInOrder(){
	//浏览器不能保证动态添加的ScriptElement会按顺序执行，所以人为来保证一下
	//参见：http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/
	//测试帮助：http://1.cuzillion.com/bin/resource.cgi?type=js&sleep=3&jsdelay=0&n=1&t=1294649352
	//todo: 目前没有充分利用部分浏览器的并行下载功能，可以改进。
	//todo: 如果服务器端能combo，则可修改以下内容以适应。
	var moduleI=loadingModules[0];
	if (!isLoading && moduleI)	{
		//alert(moduleI.url);
		isLoading=true;
		loadingModules.splice(0,1);
		function loadedDone(){
			moduleI.loadStatus=2;
			var cbs=moduleI.__callbacks;
			for(var i=0;i<cbs.length;i++) cbs[i]();
			isLoading=false;
			loadsJsInOrder();
		};
		var checker=moduleI.loadedChecker;
		if(checker && checker()){ //如果有loaderChecker，则用loaderChecker判断一下是否已经加载过
			loadedDone();
		}
		else loadJs(moduleI.url.replace(/^\/\//,QW.PATH), loadedDone);
	}
};


var ModuleH = {
	/**
	 * @property {Array} provideDomains provide方法针对的命名空间
	 */
	provideDomains:[QW],
	/**
	 * 向QW这个命名空间里设变量
	 * @method provide
	 * @static
	 * @param {string|Json} moduleName 如果类型为string，则为key，否则为Json，表示将该Json里的值dump到QW命名空间
	 * @param {any} value (Optional) 值
	 * @return {void} 
	 */		
	provide: function(moduleName, value){
		if(typeof moduleName =='string'){
			var domains=ModuleH.provideDomains;
			for(var i=0;i<domains.length;i++){
				if(!domains[i][moduleName]) domains[i][moduleName]=value;
			}
		}
		else if(isPlainObject(moduleName)) {
			for(i in moduleName){
				ModuleH.provide(i,moduleName[i]);
			}
		}
	},
	
	/** 
	* 添加模块配置。
	* @method addConfig
	* @static
	* @param {string} moduleName 模块名。（如果为json，则是moduleName/details 的键值对json）
	* @param {json} details 模块的依整配置，目前支持以下：
		url: string，js路径名。如果以"//"开头，则指相对于QW.PATH。
		requires: string，本模所依赖的其它模块。多个模块用“,”分隔
		use: 本模所加载后，需要接着加载的模块。多个模块用“,”分隔
		loadedChecker: 模块是否已经预加载的判断函数。如果本函数返回true，表示已经加载过。
	* @example 
		addConfig('Editor',{url:'wed/editor/Editor.js',requires:'Dom',use:'Panel,Drap'});//配置一个模块
		addConfig({'Editor':{url:'wed/editor/Editor.js',requires:'Dom',use:'Panel,Drap'}});//配置多个模块
	*/
	addConfig : function(moduleName,details){
		if(typeof moduleName =='string'){
			var json=mix({},details);
			json.moduleName=moduleName;
			json.__callbacks=[];
			modules[moduleName]=json;
		}
		else if(isPlainObject(moduleName)) {
			for(var i in moduleName){
				ModuleH.addConfig(i,moduleName[i]);
			}
		}
	},

	/** 
	* 按需加载模块相关js，加载完后执行callback。
	* @method use
	* @static
	* @param {string} moduleName 需要接着加载的模块名。多个模块用“,”分隔
	* @param {Function} callback 需要执行的函数.
	* @return {void} 
	* @remark 
		需要考虑的情况：
		use的module未加载/加载中/已加载、二重required或use的文件已加载/加载中/未加载
	*/
	use: function(moduleName,callback){
		var modulesJson={},//需要加载的模块Json（用json效率快）
			modulesArray=[],//需要加载的模块Array（用array来排序）			
			names=moduleName.split(','),
			i,
			j,
			k,
			len,
			moduleI;

		while (names.length){//收集需要排队的模块到modulesJson
			var names2={};
			for(i=0;i<names.length;i++){
				var nameI=names[i];
				if(!nameI || QW[nameI]) continue; //如果已被预加载，也会忽略
				if (!modulesJson[nameI]){	//还没进行收集
					if(!modules[nameI]){	//还没进行config
						throw 'Unknown module: '+nameI;
					}
					if(!modules[nameI].loadStatus!=2) {//还没被加载过  loadStatus:1:加载中、2:已加载
						var checker=modules[nameI].loadedChecker;
						if(checker && checker()){ //如果有loaderChecker，则用loaderChecker判断一下是否已经加载过
							continue;
						}
						modulesJson[nameI]=modules[nameI];//加入队列。
					}
					var refs=['requires','use'];
					for(j=0;j<refs.length;j++){ //收集附带需要加载的模块
						var sRef= modules[nameI][refs[j]];
						if(sRef){
							var refNames=sRef.split(',');
							for(k=0;k<refNames.length;k++) names2[refNames[k]]=0;
						}
					}					
				}
			}
			names=[];
			for(i in names2){
				names.push(i);
			}
		}
		for(i in modulesJson){//转化成加载数组
			modulesArray.push(modulesJson[i]);
		}

		for(i=0,len=modulesArray.length;i<len;i++) {//排序。 本排序法节约代码，但牺了性能
			if(!modulesArray[i].requires) continue;
			for(j=i+1;j<len;j++){
				if(new RegExp('(^|,)'+modulesArray[j].moduleName+'(,|$)').test(modulesArray[i].requires)) {
					//如果发现前面的模块requires后面的模块，则将被required的模块移到前面来，并重新查它在新位置是否合适
					var moduleJ=modulesArray[j];
					modulesArray.splice(j,1);
					modulesArray.splice(i,0,moduleJ);
					i--;
					break;
				}
			}
		}

		var loadIdx=-1,//需要加载并且未加载的最后一个模块的index
			loadingIdx=-1;//需要加载并且正在加载的最后一个模块的index
		for(i=0;i<modulesArray.length;i++){
			moduleI=modulesArray[i];
			if(!moduleI.loadStatus && (new RegExp('(^|,)'+moduleI.moduleName+'(,|$)').test(moduleName)) ) loadIdx=i;
			if(moduleI.loadStatus == 1 && (new RegExp('(^|,)'+moduleI.moduleName+'(,|$)').test(moduleName)) ) loadingIdx=i;
		}
		if(loadIdx != -1) {//还有未开始加载的
			modulesArray[loadIdx].__callbacks.push(callback);
		}
		else if(loadingIdx!=-1) {//还有正在加载的
			modulesArray[loadingIdx].__callbacks.push(callback);
		}
		else{
			callback();
			return;
		}
		
		for(i=0;i<modulesArray.length;i++){
			moduleI=modulesArray[i];
			if(!moduleI.loadStatus) {//需要load的js。todo: 模块combo加载
				moduleI.loadStatus=1;
				loadingModules.push(moduleI);
			}
		}
		loadsJsInOrder();
	}
};

QW.ModuleH=ModuleH;
QW.use=ModuleH.use;
QW.provide=ModuleH.provide;

})();